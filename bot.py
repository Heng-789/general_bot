import os, uuid, pytz, datetime as dt
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Chat
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ==============================================
# üîë ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TOKEN ‡πÅ‡∏•‡∏∞ TIMEZONE
# ==============================================
BOT_TOKEN = os.getenv("BOT_TOKEN")
TZ = pytz.timezone("Asia/Bangkok")

# ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å (‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
KNOWN_GROUPS = {}

app = Application.builder().token(BOT_TOKEN).build()
scheduler = AsyncIOScheduler(timezone=TZ)
scheduler.start()

POSTS = {}

# ==============================================
# üß± Helper UI
# ==============================================
def day_buttons():
    days = ["‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
    rows = [[InlineKeyboardButton(d, callback_data=f"day::{d}")] for d in days]
    rows.append([InlineKeyboardButton("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤", callback_data="next::times")])
    return InlineKeyboardMarkup(rows)

def group_menu():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(name, callback_data=f"group::{name}")] for name in KNOWN_GROUPS.keys()]
    )

# ==============================================
# üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
# ==============================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    # üîπ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
    if chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
        chat_id = chat.id
        chat_title = chat.title
        KNOWN_GROUPS[chat_title] = chat_id
        await update.message.reply_text(
            f"üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° *{chat_title}*\n\n"
            f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏´‡∏°?",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ ‡πÉ‡∏ä‡πà ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ", callback_data=f"savegroup::{chat_title}")],
                [InlineKeyboardButton("‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà", callback_data="ignore")]
            ])
        )
        return

    # üîπ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
    if not KNOWN_GROUPS:
        await update.message.reply_text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏•‡∏¢ üòÖ\n‡πÄ‡∏ä‡∏¥‡∏ç‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå /start ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return

    await update.message.reply_text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå üëá", reply_markup=group_menu())

# ==============================================
# üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
# ==============================================
async def save_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    title = q.data.split("::")[1]
    await q.edit_message_text(f"‚úÖ ‡∏Å‡∏•‡∏∏‡πà‡∏° *{title}* ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", parse_mode="Markdown")

# ==============================================
# ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π
# ==============================================
async def pick_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    label = q.data.split("::")[1]
    context.user_data["group"] = label
    await q.edit_message_text(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°: {label}\n\n‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üñºÔ∏è")

# ==============================================
# üì∏ ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ
# ==============================================
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "group" not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô (‡∏û‡∏¥‡∏°‡∏û‡πå /start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà)")
        return

    photo = update.message.photo[-1].file_id
    caption = update.message.caption or "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)"
    context.user_data["new_post"] = {"photo": photo, "caption": caption, "days": [], "times": []}
    await update.message.reply_text("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå:", reply_markup=day_buttons())

# ==============================================
# üóìÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
# ==============================================
async def pick_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    day = q.data.split("::")[1]
    if day != "‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô":
        context.user_data["new_post"]["days"].append(day)
    else:
        context.user_data["new_post"]["days"] = ["‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô"]
    await q.edit_message_text(
        f"‚úÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {', '.join(context.user_data['new_post']['days'])}\n\n"
        "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ß‡∏•‡∏≤ (‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ , ) ‡πÄ‡∏ä‡πà‡∏ô:\n09:00, 13:00, 18:00"
    )

# ==============================================
# ‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå
# ==============================================
async def handle_times(update: Update, context: ContextTypes.DEFAULT_TYPE):
    times = [t.strip() for t in update.message.text.split(",")]
    post = context.user_data["new_post"]
    post["times"] = times
    group = context.user_data["group"]
    user_id = update.message.from_user.id

    if user_id not in POSTS:
        POSTS[user_id] = []
    POSTS[user_id].append(post)

    for time in times:
        hour, minute = map(int, time.split(":"))
        if "‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô" in post["days"]:
            scheduler.add_job(send_post, "cron", hour=hour, minute=minute,
                args=[KNOWN_GROUPS[group], post["photo"], post["caption"]])
        else:
            for d in post["days"]:
                dow = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"].index(d)
                scheduler.add_job(send_post, "cron", day_of_week=dow, hour=hour, minute=minute,
                    args=[KNOWN_GROUPS[group], post["photo"], post["caption"]])

    await update.message.reply_text(
        f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n"
        f"üìÖ ‡∏ß‡∏±‡∏ô: {', '.join(post['days'])}\n"
        f"üïê ‡πÄ‡∏ß‡∏•‡∏≤: {', '.join(times)}\n"
        f"üìç ‡∏Å‡∏•‡∏∏‡πà‡∏°: {group}"
    )

# ==============================================
# ü§ñ ‡∏™‡πà‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á
# ==============================================
async def send_post(chat_id, photo, caption):
    try:
        await app.bot.send_photo(chat_id=chat_id, photo=photo, caption=caption)
        print(f"‚úÖ ‡∏™‡πà‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà {chat_id}")
    except Exception as e:
        print(f"‚ùå ‡∏™‡πà‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

# ==============================================
# üßæ ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
# ==============================================
async def list_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in POSTS or not POSTS[user_id]:
        await update.message.reply_text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡∏±‡∏ö üì≠")
        return

    lines = []
    for i, p in enumerate(POSTS[user_id], 1):
        lines.append(
            f"{i}. {p['caption'][:40]}...\nüìÖ {', '.join(p['days'])}\nüïê {', '.join(p['times'])}"
        )
    await update.message.reply_text("\n\n".join(lines))

# ==============================================
# üß© Handler
# ==============================================
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("list", list_posts))
app.add_handler(CallbackQueryHandler(save_group, pattern="^savegroup::"))
app.add_handler(CallbackQueryHandler(pick_group, pattern="^group::"))
app.add_handler(CallbackQueryHandler(pick_day, pattern="^day::"))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_times))

# ==============================================
# üöÄ Run
# ==============================================
if __name__ == "__main__":
    print("üöÄ Telegram Scheduler Bot started...")
    app.run_polling()
